// Mocks generated by Mockito 5.0.17 from annotations
// in kraken_crypto_watch/test/domain/repositories/price_feed_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:kraken_crypto_watch/data/data_sources/price_feed_data_source.dart'
    as _i4;
import 'package:kraken_crypto_watch/data/dtos/price_feed_dto.dart' as _i3;
import 'package:kraken_crypto_watch/data/mappers/price_feed_book_mapper.dart'
    as _i6;
import 'package:kraken_crypto_watch/data/mappers/price_feed_snapshot_mapper.dart'
    as _i7;
import 'package:kraken_crypto_watch/domain/entities/book_entity.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBookEntity_0 extends _i1.Fake implements _i2.BookEntity {}

class _FakePriceFeedBookDTOBook_1 extends _i1.Fake
    implements _i3.PriceFeedBookDTOBook {}

class _FakePriceFeedBookDTOSnapshot_2 extends _i1.Fake
    implements _i3.PriceFeedBookDTOSnapshot {}

/// A class which mocks [PriceFeedDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPriceFeedDataSource extends _i1.Mock
    implements _i4.PriceFeedDataSource {
  MockPriceFeedDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i3.PriceFeedBookDTOSnapshot> get snapshots =>
      (super.noSuchMethod(Invocation.getter(#snapshots),
              returnValue: Stream<_i3.PriceFeedBookDTOSnapshot>.empty())
          as _i5.Stream<_i3.PriceFeedBookDTOSnapshot>);
  @override
  _i5.Stream<_i3.PriceFeedBookDTOBook> get books =>
      (super.noSuchMethod(Invocation.getter(#books),
              returnValue: Stream<_i3.PriceFeedBookDTOBook>.empty())
          as _i5.Stream<_i3.PriceFeedBookDTOBook>);
  @override
  void askBookFeed({String? ticker}) =>
      super.noSuchMethod(Invocation.method(#askBookFeed, [], {#ticker: ticker}),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> connect() =>
      (super.noSuchMethod(Invocation.method(#connect, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> disconnect() =>
      (super.noSuchMethod(Invocation.method(#disconnect, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [PriceFeedBookMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPriceFeedBookMapper extends _i1.Mock
    implements _i6.PriceFeedBookMapper {
  MockPriceFeedBookMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookEntity mapFrom(_i3.PriceFeedBookDTOBook? from) =>
      (super.noSuchMethod(Invocation.method(#mapFrom, [from]),
          returnValue: _FakeBookEntity_0()) as _i2.BookEntity);
  @override
  _i3.PriceFeedBookDTOBook mapTo(_i2.BookEntity? to) => (super.noSuchMethod(
      Invocation.method(#mapTo, [to]),
      returnValue: _FakePriceFeedBookDTOBook_1()) as _i3.PriceFeedBookDTOBook);
}

/// A class which mocks [PriceFeedSnapshotMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPriceFeedSnapshotMapper extends _i1.Mock
    implements _i7.PriceFeedSnapshotMapper {
  MockPriceFeedSnapshotMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.BookEntity> mapFrom(_i3.PriceFeedBookDTOSnapshot? from) =>
      (super.noSuchMethod(Invocation.method(#mapFrom, [from]),
          returnValue: <_i2.BookEntity>[]) as List<_i2.BookEntity>);
  @override
  _i3.PriceFeedBookDTOSnapshot mapTo(List<_i2.BookEntity>? to) =>
      (super.noSuchMethod(Invocation.method(#mapTo, [to]),
              returnValue: _FakePriceFeedBookDTOSnapshot_2())
          as _i3.PriceFeedBookDTOSnapshot);
}
